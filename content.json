[{"title":"zyrlovelsx","date":"2019-07-15T11:30:04.000Z","path":"2019/07/15/zyrlovelsx/","text":"一生所爱心的告白","comments":true,"categories":[],"tags":[{"name":"love","slug":"love","permalink":"http://www.cnblogs.com/zyrblog/tags/love/"}]},{"title":"道德经","date":"2019-05-23T02:00:25.000Z","path":"2019/05/23/道德经/","text":"&nbsp;&nbsp;&nbsp;《道德经》，春秋时期老子（李耳）的哲学作品，又称《道德真经》、《老子》、《五千言》、《老子五千文》，是中国古代先秦诸子分家前的一部著作，是道家哲学思想的重要来源。道德经分上下两篇，原文上篇《德经》、下篇《道经》，不分章，后改为《道经》37章在前，第38章之后为《德经》，并分为81章。文本以哲学意义之“道德”为纲宗，论述修身、治国、用兵、养生之道，而多以政治为旨归，乃所谓“内圣外王”之学，文意深奥，包涵广博。 第一章123456道可道，非常道。名可名，非常名。无名天地之始，有名万物之母。故常无欲以观其妙,常有欲以观其徼。此两者同出而异名，同谓之玄。玄之又玄，众妙之门。 第二章1234567天下皆知美之为美，斯恶矣；皆知善之为善，斯不善已。故有无相生，难易相成，长短相形，高下相倾，音声相和，前後相随。是以圣人处无为之事，行不言之教。万物作焉而不辞。生而不有，为而不恃，功成而弗居。夫唯弗居，是以不去。 第三章123456不尚贤,使民不争。不贵难得之货,使民不为盗。不见可欲，使民心不乱。是以圣人之治，虚其心，实其腹，弱其志，强其骨；常使民无知、无欲，使夫智者不敢为也。为无为，则无不治。 第四章1234道冲而用之，或不盈。渊兮似万物之宗。解其纷，和其光，同其尘，湛兮似或存。吾不知谁之子，象帝之先。 第五章12345天地不仁，以万物为刍狗。圣人不仁，以百姓为刍狗。天地之间，其犹橐迭乎？虚而不屈，动而愈出。多言数穷，不如守中。 第六章123谷神不死是谓玄牝。玄牝之门是谓天地根。绵绵若存，用之不勤。 第七章1234天长地久。天地所以能长且久者，以其不自生，故能长生。是以圣人後其身而身先，外其身而身存。非以其无私邪！故能成其私。 第八章1234上善若水。水善利万物而不争，处众人之所恶，故几於道。居善地，心善渊，与善仁，言善信，正善治，事善能，动善时。夫唯不争，故无尤。 第九章12345持而盈之不如其己；揣而锐之不可长保；金玉满堂莫之能守；富贵而骄，自遗其咎。功遂身退，天之道。 第十章123456载营魄抱一，能无离乎？专气致柔，能如婴儿乎？涤除玄览，能无疵乎？爱国治民，能无为乎？天门开阖，能为雌乎？明白四达，能无知乎。 第十一章1234三十幅共一毂，当其无，有车之用。埏埴以为器，当其无，有器之用。凿户牖以为室，当其无，有室之用。故有之以为利，无之以为用。 第十二章123456五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋猎令人心发狂，难得之货令人行妨。是以圣人，为腹不为目，故去彼取此。 第十三章1234567宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下。得之若惊，失之若惊，是谓宠辱若惊。何谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患。故贵以身为天下，若可寄天下。爱以身为天下，若可托天下。 第十四章123456789视之不见名曰夷。听之不闻名曰希。抟之不得名曰微。此三者不可致诘，故混而为一。其上不皦(jiǎo)，其下不昧，绳绳不可名，复归於无物。是谓无状之状，无物之象，是谓惚恍。迎之不见其首，随之不见其後。执古之道以御今之有。能知古始，是谓道纪。 第十五章123456789101112131415古之善为士者，微妙玄通，深不可识。夫唯不可识，故强为之容。豫兮若冬涉川；犹兮若畏四邻；俨兮其若容；涣兮若冰之将释；敦兮其若朴；旷兮其若谷；混兮其若浊；澹兮其若海；飉(liáo,风的声音)兮若无止。孰能浊以静之徐清。孰能安以动之徐生。保此道者不欲盈。夫唯不盈故能蔽而新成。 第十六章1234567致虚极守静笃。万物并作，吾以观复。夫物芸芸各复归其根。归根曰静，是谓复命；复命曰常，知常曰明。不知常，妄作凶。知常容，容乃公，公乃全，全乃天，天乃道，道乃久，没身不殆。 第十七章1234567太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。信不足焉，有不信焉。悠兮其贵言。功成事遂，百姓皆谓：我自然。 第十八章1234大道废有仁义；慧智出有大伪；六亲不和有孝慈；国家昏乱有忠臣。 第十九章12345绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有；此三者，以为文不足。故令有所属，见素抱朴少私寡欲。 第二十章1234567891011121314绝学无忧，唯之与阿，相去几何？善之与恶，相去若何？人之所畏，不可不畏。荒兮，其未央哉！众人熙熙，如享太牢，如春登台。我独泊兮其未兆，如婴儿之未孩；儡儡(lěi,羸弱)兮若无所归。众人皆有馀，而我独若遗。我愚人之心也哉！沌沌兮。俗人昭昭，我独昏昏；俗人察察，我独闷闷。众人皆有以，而我独顽且鄙。我独异於人，而贵食母。 第二十一章123456789孔德之容惟道是从。道之为物惟恍惟惚。惚兮恍兮其中有象。恍兮惚兮其中有物。窈兮冥兮其中有精。其精甚真。其中有信。自古及今，其名不去以阅众甫。吾何以知众甫之状哉！以此。 第二十二章12345678曲则全，枉则直，洼则盈，敝则新少则得，多则惑。是以圣人抱一为天下式。不自见故明；不自是故彰；不自伐故有功；不自矜故长；夫唯不争，故天下莫能与之争。古之所谓“曲则全”者，岂虚言哉？诚全而归之。 第二十三章1234567891011希言自然。故飘风不终朝，骤雨不终日。孰为此者？天地。天地尚不能久，而况於人乎？故从事於道者，同於道。德者同於德。失者同於失。同於道者，道亦乐得之；同於德者，德亦乐得之；同於失者，失於乐得之；信不足焉，有不信焉！ 第二十四章12345678企者不立；跨者不行。自见者不明；自是者不彰。自伐者无功；自矜者不长。其在道也曰：馀食赘形。物或恶之，故有道者不处。 第二十五章12345678有物混成先天地生。寂兮寥兮独立不改，周行而不殆，可以为天下母。吾不知其名，强字之曰道。强为之名曰大。大曰逝，逝曰远，远曰反。故道大、天大、地大、人亦大。域中有大，而人居其一焉。人法地，地法天，天法道，道法自然。 第二十六章12345重为轻根，静为躁君。是以君子终日行不离轻重。虽有荣观燕处超然。奈何万乘之主而以身轻天下。轻则失根，躁则失君。 第二十七章1234567891011善行无辙迹。善言无瑕谪。善数不用筹策。善闭无关楗而不可开。善结无绳约而不可解。是以圣人常善救人，故无弃人。常善救物，故无弃物。是谓袭明。故善人者不善人之师。不善人者善人之资。不贵其师、不爱其资，虽智大迷，是谓要妙。 第二十八章12345678知其雄，守其雌，为天下溪。为天下溪，常德不离，复归於婴儿。知其白，守其黑，为天下式。为天下式，常德不忒，复归於无极。知其荣，守其辱，为天下谷。为天下谷，常德乃足，复归於朴。朴散则为器，圣人用之则为官长。故大制不割。 第二十九章1234将欲取天下而为之，吾见其不得已。天下神器，不可为也，为者败之，执者失之。夫物或行或随、或觑或吹、或强或羸、或挫或隳。是以圣人去甚、去奢、去泰。 第三十章1234567891011以道佐人主者，不以兵强天下。其事好还。师之所处荆棘生焉。军之後必有凶年。善有果而已，不敢以取强。果而勿矜。果而勿伐。果而勿骄。果而不得已。果而勿强。物壮则老，是谓不道，不道早已。 第三十一章123456789夫佳兵者不祥之器，物或恶之，故有道者不处。君子居则贵左，用兵则贵右。兵者不祥之器，非君子之器，不得已而用之，恬淡为上。胜而不美，而美之者，是乐杀人。夫乐杀人者，则不可得志於天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右。言以丧礼处之。杀人之众，以悲哀泣之，战胜以丧礼处之。 第三十二章123456道常无名。朴虽小天下莫能臣也。侯王若能守之，万物将自宾。天地相合以降甘露，民莫之令而自均。始制有名，名亦既有，夫亦将知止，知止可以不殆。譬道之在天下，犹川谷之於江海。 第三十三章123456知人者智，自知者明。胜人者有力，自胜者强。知足者富。强行者有志。不失其所者久。死而不亡者，寿。 第三十四章12345大道泛兮，其可左右。万物恃之以生而不辞，功成而不名有。衣养万物而不为主，常无欲可名於小。万物归焉，而不为主，可名为大。以其终不自为大，故能成其大。 第三十五章1234567执大象天下往。往而不害安平太。乐与饵，过客止。道之出口淡乎其无味。视之不足见。听之不足闻。用之不足既。 第三十六章1234567将欲歙之，必固张之。将欲弱之，必固强之。将欲废之，必固兴之。将欲取之，必固与之。是谓微明。柔弱胜刚强。鱼不可脱於渊，国之利器不可以示人。 第三十七章12345道常无为，而无不为。侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。无名之朴，夫亦将无欲。不欲以静，天下将自定。 第三十八章12345678910111213141516上德不德，是以有德。下德不失德，是以无德。上德无为而无以为。下德无为而有以为。上仁为之而无以为。上义为之而有以为。上礼为之而莫之以应，则攘臂而扔之。故失道而後德，失德而後仁，失仁而後义，失义而後礼。夫礼者，忠信之薄，而乱之首。前识者，道之华，而愚之始。是以大丈夫，处其厚不居其薄。处其实，不居其华。故去彼取此。 第三十九章12345678910111213141516171819昔之得一者。天得一以清。地得一以宁。神得一以灵。谷得一以盈。万物得一以生。侯王得一以为天下贞。其致之。天无以清将恐裂。地无以宁将恐废。神无以灵将恐歇。谷无以盈将恐竭。万物无以生将恐灭。侯王无以贞将恐蹶。故贵以贱为本，高以下为基。是以侯王自称孤、寡、不谷。此非以贱为本邪？非乎。至誉无誉。不欲琭琭如玉，珞珞如石。 第四十章123反者道之动。弱者道之用。天下万物生於有，有生於无。 第四十一章12345678910111213141516171819上士闻道勤而行之。中士闻道若存若亡。下士闻道大笑之。不笑不足以为道。故建言有之。明道若昧。进道若退。夷道若纇。上德若谷。大白若辱。广德若不足。建德若偷。质真若渝。大方无隅。大器晚成。大音希声。大象无形。道隐无名。夫唯道善贷且成。 第四十二章12345道生一。一生二。二生三。三生万物。万物负阴而抱阳，冲气以为和。人之所恶，唯孤、寡不谷，而王公以为称，故物或损之而益，或益之而损。人之所教，我亦教之，强梁者，不得其死。吾将以为教父。 第四十三章123天下之至柔，驰骋天下之至坚。无有入无间，吾是以知无为之有益。不言之教，无为之益天下希及之。 第四十四章12345678名与身孰亲。身与货孰多。得与亡孰病。是故甚爱必大费。多藏必厚亡。知足不辱。知止不殆。可以长久。 第四十五章1234567大成若缺，其用不弊。大盈若冲，其用不穷。大直若屈。大巧若拙。大辩若讷。静胜躁，寒胜热。清静为天下正。 第四十六章12345天下有道，却走马以粪。天下无道，戎马生於郊。祸莫大於不知足。咎莫大於欲得。故知足之足常足矣。 第四十七章123456不出户知天下。不窥牖见天道。其出弥远，其知弥少。是以圣人不行而知。不见而明。不为而成。 第四十八章12345为学日益。为道日损。损之又损，以至於无为。无为而不为。取天下常以无事，及其有事，不足以取天下。 第四十九章12345678圣人无常心。以百姓心为心。善者吾善之。不善者吾亦善之，德善。信者吾信之。不信者吾亦信之，德信。圣人在天下，歙歙(xīxī,无所偏执的样子)焉，为天下浑其心。百姓皆注其耳目，圣人皆孩之。 第五十章12345678出生入死。生之徒，十有三。死之徒，十有三。人之生，动之於死地，亦十有三。夫何故？以其生生之厚。盖闻善摄生者，陆行不遇凶虎，入军不被甲兵。凶无所投其角。虎无所用其爪。兵无所容其刃。夫何故？以其无死地。 第五十一章123456789道生之，德畜之，物形之，势成之。是以万物莫不尊道，而贵德。道之尊，德之贵，夫莫之命而常自然。故道生之，德畜之。长之育之。亭之毒之。养之覆之。生而不有，为而不恃，长而不宰。是谓玄德。 第五十二章12345678天下有始，以为天下母。既得其母，以知其子。既知其子，复守其母，没身不殆。塞其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见其小曰明，守柔曰强。用其光，复归其明，无遗身殃。是为习常。 第五十三章123456使我介然有知，行於大道，唯施是畏。大道甚夷，而人好径。朝甚除，田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有馀。是谓盗夸。非道也哉。 第五十四章12345678910善建者不拔。善抱者不脱。子孙以祭祀不辍。修之於身其德乃真。修之於家其德乃馀。修之於乡其德乃长。修之於邦其德乃丰。修之於天下其德乃普。故以身观身，以家观家，以乡观乡，以邦观邦，以天下观天下。吾何以知天下然哉？以此。 第五十五章1234567891011含德之厚比於赤子。毒虫不螫，猛兽不据，攫鸟不抟。骨弱筋柔而握固。未知牝牡之合而全作，精之至也。终日号而不嗄，和之至也。知和曰常。知常曰明。益生曰祥。心使气曰强。物壮则老。谓之不道，不道早已。 第五十六章12345678910知者不言。言者不知。挫其锐，解其纷，和其光，同其尘，是谓玄同。故不可得而亲。不可得而疏。不可得而利。不可得而害。不可得而贵。不可得而贱。故为天下贵。 第五十七章12345678910以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此。天下多忌讳而民弥贫。民多利器国家滋昏。人多伎巧奇物泫起。法令滋彰盗贼多有。故圣人云我无为而民自化。我好静而民自正。我无事而民自富。我无欲而民自朴。 第五十八章1234567891011其政闷闷，其民淳淳。其政察察，其民缺缺。祸尚福之所倚。福尚祸之所伏。孰知其极，其无正。正复为奇，善复为妖。人之迷其日固久。是以圣人方而不割。廉而不刿。直而不肆。光而不耀。 第五十九章12345678治人事天莫若啬。夫唯啬是谓早服。早服谓之重积德。重积德则无不克。无不克则莫知其极。莫知其极可以有国。有国之母可以长久。是谓深根固柢，长生久视之道。 第六十章12345治大国若烹小鲜。以道莅天下，其鬼不神。非其鬼不神，其神不伤人。非其神不伤人，圣人亦不伤人。夫两不相伤，故德交归焉。 第六十一章12345678910大国者下流，天下之交。天下之牝。牝常以静胜牡。以静为下。故大国以下小国，则取小国。小国以下大国，则取大国。故或下以取，或下而取。大国不过欲兼畜人。小国不过欲入事人。夫两者各得所欲，大者宜为下。 第六十二章12345678道者万物之奥。善人之宝，不善人之所保。美言可以市尊。美行可以加人。人之不善，何弃之有。故立天子、置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何。不曰∶求以得，有罪以免邪？故为天下贵。 第六十三章123456789为无为，事无事，味无味。大小多少，报怨以德。图难於其易，为大於其细。天下难事必作於易。天下大事必作於细。是以圣人终不为大，故能成其大。夫轻诺必寡信。多易必多难。是以圣人犹难之，故终无难矣。 第六十四章123456789101112其安易持，其未兆易谋。其脆易泮，其微易散。为之於未有，治之於未乱。合抱之木生於毫末。九层之台起於累土。千里之行始於足下。为者败之，执者失之。是以圣人无为故无败，无执故无失。民之从事常於几成而败之。慎终如始则无败事。是以圣人欲不欲，不贵难得之货。学不学，复众人之所过，以辅万物之自然而不敢为。 第六十五章123456789古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼。不以智治国，国之福。知此两者，亦稽式。常知稽式，是谓玄德。玄德深矣、远矣！与物反矣。然後乃至大顺。 第六十六章123456江海之所以能为百谷王者，以其善下之，故能为百谷王。是以圣人欲上民，必以言下之。欲先民，必以身後之。是以圣人处上而民不重，处前而民不害。是以天下乐推而不厌。以其不争，故天下莫能与之争。 第六十七章12345678天下皆谓我道大似不肖。夫唯大故似不肖。若肖，久矣！其细也夫。我有三宝持而保之：一曰慈，二曰俭，三曰不敢为天下先。慈故能勇，俭故能广，不敢为天下先故能成器长。今舍慈且勇，舍俭且广，舍後且先，死矣！夫慈以战则胜，以守则固。天将救之以慈卫之。 第六十八章1234567善为士者不武。善战者不怒。善胜敌者不与。善用人者为之下。是谓不争之德。是谓用人之力。是谓配天之极。 第六十九章123456789用兵有言，吾不敢为主而为客。不敢进寸而退尺。是谓行无行。攘无臂。扔无敌。执无兵。祸莫大於轻敌。轻敌几丧吾宝。故抗兵相加哀者胜矣。 第七十章123456吾言甚易知、甚易行。天下莫能知、莫能行。言有宗、事有君。夫唯无知，是以我不知。知我者希，则我者贵。是以圣被褐怀玉。 第七十一章1234知不知上，不知知病。夫唯病病，是以不病。圣人不病，以其病病。夫唯病病，是以不病。 第七十二章123456民不畏威，则大威至。无狎其所居，无厌其所生。夫唯不厌，是以不厌。是以圣人自知不自见。自爱不自贵。故去彼取此。 第七十三章123456789勇於敢则杀。勇於不敢则活。此两者或利或害。天之所恶孰知其故。天之道不争而善胜。不言而善应。不召而自来。繟(chǎn,舒缓)然而善谋。天网恢恢疏而不失。 第七十四章12345民不畏死，奈何以死惧之。若使民常畏死，而为奇者，吾得执而杀之，孰敢。常有司杀者杀。夫代司杀者杀，是谓代大匠斫。夫代大匠斫者，希有不伤其手矣。 第七十五章1234民之饥以其上食税之多，是以饥。民之难治以其上之有为，是以难治。民之轻死以其求生之厚，是以轻死。夫唯无以生为者，是贤於贵生。 第七十六章12345人之生也柔弱，其死也坚强。草木之生也柔脆，其死也枯槁。故坚强者死之徒，柔弱者生之徒。是以兵强则灭，木强则折。强大处下，柔弱处上。 第七十七章12345678天之道其犹张弓与。高者抑之，下者举之。有馀者损之，不足者补之。天之道，损有馀而补不足。人之道，则不然，损不足以奉有馀。孰能有馀以奉天下，唯有道者。是以圣人为而不恃，功成而不处。其不欲见贤邪！ 第七十八章123456789天下莫柔弱於水。而攻坚强者，莫之能胜。以其无以易之。弱之胜强。柔之胜刚。天下莫不知莫能行。是以圣人云，受国之垢是谓社稷主。受国不祥是为天下王。正言若反。 第七十九章1234和大怨必有馀怨，安可以为善。是以圣人执左契，而不责於人。有德司契，无德司彻。天道无亲常与善人。 第八十章123456789小国寡民。使有什伯之器而不用。使民重死而不远徙。虽有舟舆无所乘之。虽有甲兵无所陈之。使民复结绳而用之。甘其食、美其服、安其居、乐其俗。邻国相望，鸡犬之声相闻。民至老死不相往来。 第八十一章1234567891011信言不美。美言不信。善者不辩。辩者不善。知者不博。博者不知。圣人不积。既以为人己愈有。既以与人己愈多。天之道利而不害。圣人之道为而不争。","comments":true,"categories":[],"tags":[{"name":"哲学","slug":"哲学","permalink":"http://www.cnblogs.com/zyrblog/tags/哲学/"},{"name":"道德经","slug":"道德经","permalink":"http://www.cnblogs.com/zyrblog/tags/道德经/"}]},{"title":"关于春招这几个月的总结和反思","date":"2019-05-14T14:57:38.000Z","path":"2019/05/14/关于春招这几个月的总结和反思/","text":"&nbsp;&nbsp;&nbsp;下面我将自己从二月下旬来到学校到现在五月中旬的春招经历做一个总结，其中的心酸和波折也是值得一谈的！ 二月彷徨&nbsp;&nbsp;&nbsp;还记得二月下旬刚来到学校，春招的气息就已经扑面而来，有那么一丝期待，更多的是为自己之前三天打鱼两天晒网的懒散而恐慌，说实话，直到这个时候才是真的准备春招吧，而别人可是拿着一两年的时间去事无巨细的准备的，还怎么和别人比？！很多东西不是靠着一时的投机取巧就能成功的，特别是技术招聘这种全方位、精细化、有针对性、摸底的笔试和面试，于是决定先韬光养晦一段时间，但是效果不是很理想，转眼间就到了三月份，很多东西是赖不过去的，运气也是青睐有准备的人的，对于没有准备的人来说，运气可能成为一种遗憾。 三月觉悟&nbsp;&nbsp;&nbsp;到了三月份很多公司都开始内推了，之前对这个还是不熟悉的，后来就明白流程了，基本上就是通过熟人或者某些公司的员工在牛客网发布的内推码报名之后可能免笔试，直接进入面试，同时如果通过了内推，那些发布内推码的人也会得到一定的奖励，内推对于笔试差的人是非常有用的。尽管有着这么多的内推机会，自己还是不敢轻易的报名，因为自己准备的真是不足呀！ 面试定位&nbsp;&nbsp;&nbsp;之前也没太多的打算，就打算先试试Java后端开发的方向，其实说实话这个方向做的人太多了，拿的薪资可能并不理想的，现在最流行的就是AI和算法了，但是自己之前对机器学习、深度学习等方面的知识了解的并不系统性和完备性，做这个的话是没有太多把握的，于是就只能先从底层做起了。 面试前期知识点准备&nbsp;&nbsp;&nbsp;因为这个方向比较老旧，所以网上的内容比较完备，有着很多的面试题和面试心得，这点是比较好的，刚开始把Java底层的东西认真的看了一下，才发现只是真的太多了，从基本语法、OOP特性、异常处理、文件管理、序列化、多线程（线程池）、JUC包(ConcurrentHashMap、CycleBarrier、CountDownLatch…)、Java容器（HashMap,TreeMap…）、并发关键字(volitile,sychronized)、某些特别的类（String,HashMap…）到JVM的基本原理、JMM、垃圾回收、性能调优、错误排查、类加载机制、内存泄漏等等知识，真的是让人目不暇接呀，从最开始的记忆，到后来的半生不熟，再到后来的能说会道，以为准备成这样就能面试了，结果被狠狠地打脸了，真正的面试是逐步深入，层层递进，一下问到底，从一个问题出发问到方方面面的，就拿线程池来说，每一次都觉得准备的差不多了，首先是线程池的参数、运行原理、拒绝策略、内部实现（AQS)、具体的实现、再从具体的实现中挑几个比较一下异同以及应用的场景，这还不算玩，再比如说问一下newScheduledPool的两种运行机理，触发时机等等，这些东西如果没有对源码有着深刻的了解，一般都会死在半路上的，所以网上的东西都是片面的，可能是问的却是简单，可能是时间比较久远，也可能是作者的表述能力有限，总之都涵盖不了全部的内容，这点需要深刻的警醒。仅仅有这些基础知识是不够的，面试官往往会根据做的项目用到的东西不断地深入去问，比如SpringMVC,SpringBoot,Tomcat，Mybatis,Redis，MySql,如果项目中用到了这些东西，每一个都能深入的问很久的，但是仅仅这些还是不够的，我就是吃了这个亏，以为只要把自己项目中提到的准备详细就行了，结果发现远远比这个复杂，作为一个后端的技术栈，往往还会问一下消息队列（MQ）,RPC这些分布式通信协作上面的东西，特别是阿里最喜欢问这个了，因为RocketMQ和Dubbo都是出自这里的，这是逃不掉的问题，甚至还会问一下对云计算有多少了解，还知道什么中间件等等的问题，因此千万不要认为完成自己掌握的已经差不多了，可以说每一个技术深究下去都能说好多天了！ 简历投递&nbsp;&nbsp;&nbsp;于是三月份就在准备这个东西了，说实话，我也有一定的惰性，特别是在寝室里面，每天起得晚，玩会儿电脑，吃个饭，刷个抖音，就到晚上了，每一天过得太废了，导致的结果就是把自己以前积累下来的好的学习经验、学习习惯全都遗忘了，整个人退化成了一个小白！我想大家在大学也会有这种感受，有的时候多余的空闲时间往往不是好事，反而是一种慢性毒丸，让人慢性自杀！一定要让自己忙起来才能真正的有所收获，内心充实！因为我的惰性，直到三月底才姗姗的将简历投了出去，主要投的是几个大厂:BATJ,华为，字节跳动，Vivo/Oppo,bilibili,携程，360，拼多多等等，结果收到笔试和通知的公司也就五六个罢了，可能和今年的经济不景气有关，很多公司基本上很早的时候就关闭了春招通道，只有一些大厂还在支撑吧，并且招聘的难度也比往年的严上了很多。关于简历的内容一定要注意上面写的项目一定要非常的熟悉，能说出架构、需求、实现，之后是优化、重构，同时对每一个过程都要了如指掌，比如用到了session和cookie，那么就要明白中间的通信逻辑。有的公司只看了第一个项目就问别的了，有的公司是把所有的项目都问了一遍的，侧重于第一个，但是其他项目的知识点和原理一定要好好准备，不要有侥幸心理！！！简历要写的简约大方一点，突出重点，以点带面。 四月鏖战&nbsp;&nbsp;&nbsp;在三月份错过了很多的招聘和内推，到了四月份更多的就是笔试之后面试了，不过我的运气还是不错的，刚投了简历有个三四天，字节跳动就给我打了个电话，大概是说他们对我的简历比较感兴趣，想看一下什么时候能面试，于是我们约定了个时间，差不多在清明节之后4.8号的下午两点，当时本来还在颓废着的，突然就感觉到时间的紧迫起来，于是在短短的四五天时间，我又对项目中遇到的问题下了一番功夫去钻研。紧接着就到了面试的时间了。 字节跳动一面&nbsp;&nbsp;&nbsp;还记得那天天气比较热，上午吃饭之后歇了一会儿，到了下午一点四五十分就打开了那边在牛客网面试的链接，开始等待了，到了一点五十六分左右，那边就发过来视频了，一面的面试官挺不错的，对人态度也好，比较平易近人；首先是自我介绍，之前也打了个草稿，后来发现还是有点作用的，说的含含糊糊，“面试官您好，我是17级的XXX,来自XXX,专业XXX…”之后还想往学习生活这边扯的，就被打住了，让我谈一下项目，于是我就说了自己写在最前面的一个项目，主要功能，自己做的模块，其中就有一个订单模块，当时我们做的比较简陋，没有考虑到集群/分布式带来的问题，面试官很鞭辟入里的问了订单ID如何保证唯一性，如何避免重复下单这两个经典的问题，我之前没有好好准备过这个，答得可能有点词不达意，说白了只有长期在一线的程序员才能真正的找出业务容易出现的问题，上来就首战失利，我把前几天看过的分布式锁机制说了一下，解决这个问题，面试官又问了一下分布式锁，我答的也不够好。&nbsp;&nbsp;&nbsp;之后又问了使用Redis存储短信验证码，验证之后是直接删除，还是等到过期删除，我回答的过期删除，他有点不满意，之后就问了我很多Redis方面的内容，这点我还是准备过的，你对Redis的了解，单线程的本质是只有一个线程还是在IO多路复用只有一个线程，备份机制等等，其中有个问题让我觉得问的很接近与实用性，那就是设定了一个key过期，之后对这个key的value进行了更改，过期是否生效，多亏我之前确实遇到过这个问题，才回答了过期不生效，之后是Redis的数据类型（String，List,Hash，Set，SortedSet）对应的数据结构（一共8个，比如emstr,raw,skiplist…），自己最熟悉哪个？然后就问到了我SortedSet用到了什么数据结构，我回答了跳表（SkipList），其实还有Hash结构的，然后问我跳表的特性，构建方式，增删改查等等，我之前是看过的，但是对于构建说的不好（其实是通过抛硬币或者随机概率决定的），被问住了。&nbsp;&nbsp;&nbsp;说完这些又问了MySQL上面的东西，事务特性，隔离等级，索引（B+树，hash），最左前缀原则，执行计划，索引失效和优化等等，反而是其他问的比较少。&nbsp;&nbsp;&nbsp;后来又让我写了一个查找算法，从排序过的字符串数组中查找一个特定的二分查找呀，不假思索的在牛客网上写好了，结果面试官并不满意，我在想难道还有比O(logN)还优的算法？然后面试官等着我发现问题，我也确实很难发现问题，还是面试官最后只出了两个问题，第一个就是（i+j）/2的时候可能发生溢出，当时我们想明白解决办法，后来才知道使用i+(j-i)/2这个运算就能保证了，第二个问题是如果要查找的元素出现了不止一次怎么办？确实这两个问题之后在一些博客上也看到过，看是经验不足，思考不周呀！！！ 字节跳动二面&nbsp;&nbsp;&nbsp;上次面试完的第二天，那边就打电话过来让准备二面了，约定了一个时间，两天后还是下午两点准备二面。有了上次的面试，我确实找到了很多的在剩下的时间，我把分布式锁好好地掌握了一下，并且把如何预防重复提交也找到了前后端的很多解决方案，除此之外也把一些不懂的知识点又做了一定的复习。很快的到了面试的时候，我一点五十分左右就等着了，到了二点多也没消息，于是打了个电话问了一下才知道牛客网部分模块挂掉了，正在恢复呢，也是运气好到爆呀，后来到了两点二十左右才连上线，可能这段时间那边的面试官也比较烦躁，感觉整个人脾气不是很好，还是先自我介绍，之后是自己的项目，还问到了一面的问题，我就向分布式锁上面说，结果把三种实现方式都说完了，面试官很不满意，又说网上那么多解决方案，问什么要用这么重量级的，可能从这个时候开始，面试官就把我给挂掉了，因此有的问题要多百度一下呀。&nbsp;&nbsp;&nbsp;之后还是问了一些关于Redis和MySQL上面的，才说了没多久，面试官就说你对redis很了解呀，那你说说知道哪些东西吧！我说了一些常规的内容，面试官并不满意，让我说一下cluster，也就是Redis集群，我就说了哨兵节点，高可用的实现，我怀疑他是搞测试的，接下来他又问如果主从备份中，主节点挂掉了咋办，我说哨兵节点选举出一个从节点做主节点，那个人又说要是从节点都挂掉了呢？！数据会不会丢失，我说如果同时挂掉，某些数据是会丢失的，当然也考虑到WAL机制，还是会有一些东西丢失吧，后来面试官就很不高兴了，于是就这样尬聊了四五十分钟，到了最后出了一道算法题，直接在牛客网上写代码，是一个网上已有的题目，但是我没有见过，所以做的有点差，就是求矩阵中“孤岛”的数目，关于“孤岛”的定义就是矩阵是有‘-’和‘+’组成的，如果一团‘+’被‘-’包围，那么这一团‘+’就是“孤岛”，关于这个问题其实后来想想使用DFS很快就做出来了，但是当时我做的可能不是很好，于是面试官简单的说了两句就挂掉视频了，我知道这次的面试等于是凉凉了！！！其实仔细思考一下面试刚开始面试官对自己的印象是非常重要的，如果留下了差的印象，他就会不断地怼你，直到把你挂掉。仔细想一下，这次的面试官是二面的，可能是个部门的管理人员，所以那心态和脾气都不是一般的小，也是长期在那个位置上养成的气势，我并不觉得是个好事。&nbsp;&nbsp;&nbsp;整体来说，字节跳动面试的内容侧重于项目，但是更多的是集中于redis和mysql这些数据存储方面的内容的，关于mybatis，spring方面的内容比较少，可能和这边的部门有关吧。 菜鸟网络面试&nbsp;&nbsp;&nbsp;说实话，上次挂掉之后对自己的打击还是比较大的，也曾颓废过一段时间，后来又振作了起来，结果有一天晚上七点左右，菜鸟网络给我打了个电话，问了我的名字，之后还当是约一下面试的时间的，谁知道直接就开始给我面试了，之前从没给我通知过，后来才发现这是阿里的很多面试官喜欢采取的面试方法，打你个措手不及来看看你的应变能力！于是和面试官电话面试了70分钟，最后给我挂掉了。。。是不是很醉呀！&nbsp;&nbsp;&nbsp;面试问的东西是这样的，首先看了我的学校，其次问我学的课程，之后问我看过什么书，然后开始问我做的项目，我就说了之前说过的东西，因为上次早有准备，这次总算是没有被订单ID问住，然后又问了项目是如何确定每一个用户的，其实就是session和cookie，我说了之后，面试官继续问它们之间是怎么建立连接的，这点问得我措手不及，然后长驱直入的问我线程池，如何返回执行结果，如何非阻塞返回结果。。。然后又问我其他的项目，很简单的就问到了SOA,消息队列是怎么推送消息的，长连接？websocket？这些问题问的我没有准备，然后云计算，然后RPC，最后面试官自己都不知道该怎么描述问题了，因为我这边对题意的理解都出现了一些偏差，当然还问了很多其他的东西，就这样一直问了七十多分钟，最后我问了一下公司这边具体做哪些业务，面试官说就是简单的Java基础，我。。。&nbsp;&nbsp;&nbsp;确实是自己准备的不够好，并且技术栈不充实，对于细节上的东西还是了解的不深入，因此很容易被问住。 华为面试&nbsp;&nbsp;&nbsp;一转眼就到了四月中旬了，我也参加了很多的笔试，最终的结果大多都是杳无音信，很多笔试的编程题目真的是很难呀，如果平时不多刷一些LeetCode上面的题目，那基本上就是送菜的，但是当时的情况下根本就没有太多时间去做这些了，于是基本上都是三道题做出来一道，一道半，甚至有的题目怪异的都做不出来。也参加了华为的笔试，当时自己生病了，笔试做的也不好，把主要精力放到第二道题，第一道题很简单的，测试用例没有全部通过，于是就知道自己挂了，但是挂了一段时间之后，还是收到了去面试的通知，当时还是挺开心的。 笔试代码这道题是判断双回文字符串的1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import java.util.Scanner;public class Main &#123; public static void main(String[] args) &#123; //判断一个字符串是否为双对称字符串 Scanner sc=new Scanner(System.in); while(sc.hasNext())&#123; //开始对str进行判断 String str=sc.next(); int low=0; int high=str.length()-1; boolean result=true; //首先检查对称性 while(low&lt;high)&#123; if(str.charAt(low)==str.charAt(high))&#123; low++; high--; &#125;else&#123; result=false; System.out.println(false); break; &#125; &#125; if(result==false)&#123; continue; &#125; //如果满足对称性，判断是否为偶数 if(str.length()%2!=0)&#123; result=false; System.out.println(false); continue; &#125; //判断元素相等性质 for (int j = 0; j &lt; str.length(); j++) &#123; if(j%2==0 &amp;&amp; str.charAt(j)!=str.charAt(j+1))&#123; //说明不能临近匹配 result=false; System.out.println(false); break; &#125; &#125; if(result==false)&#123; continue; &#125; //如果满足上面三个性质，则进行分离操作 StringBuilder sb=new StringBuilder(); for (int j = 0; j &lt; str.length(); j++) &#123; if(j%2==0)&#123; sb.append(str.charAt(j)); &#125; &#125; System.out.println(sb.toString()); &#125; &#125;&#125; 下面的一题是将密文破解成明文的题目123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227import java.util.Collections;import java.util.LinkedList;import java.util.List;import java.util.Scanner;public class Main &#123; public static void main(String[] args) &#123; Scanner sc=new Scanner(System.in); //接收字符串，将其转变成数字 //字符串升序排列，则是此题的解决关键 //只要识别了其中的所有元素，将这些元素升序排列即可 //识别的时候从0开始尝试，去除其中的某些字母 //直至最终能够遍历0——9之后元素被完整去除 //如果没有，则是其中某一步出了问题，回退回去继续开始 String str=sc.next(); //转成小写，之后尝试去除 str=str.toLowerCase(); //将元素放到List List list=new LinkedList&lt;Character&gt;(); for (int i = 0; i &lt; str.length(); i++) &#123; list.add((Character)str.charAt(i)); &#125; dfs(list); &#125; public static List result= new LinkedList&lt;Integer&gt;(); public static boolean flag= true; public static void dfs(List list)&#123; //oneThreeFourFiveFOURONENINE if(list.size()==0 &amp;&amp; flag==true)&#123; //移除成功返回结果 Collections.sort(result); for (int i = 0; i &lt;result.size() ; i++) &#123; System.out.print(result.get(i)); &#125; flag=false; return; &#125; if( list.contains(&apos;z&apos;) &amp;&amp; list.contains(&apos;e&apos;) &amp;&amp; list.contains(&apos;r&apos;)&amp;&amp; list.contains(&apos;o&apos;)) &#123;//尝试移除元素 list.remove((Character)&apos;z&apos;); list.remove((Character)&apos;e&apos;); list.remove((Character)&apos;r&apos;); list.remove((Character)&apos;o&apos;); result.add(0); dfs(list); list.add(&apos;z&apos;); list.add(&apos;e&apos;); list.add(&apos;r&apos;); list.add(&apos;o&apos;); result.remove((Integer)0); &#125; if( list.contains(&apos;o&apos;) &amp;&amp; list.contains(&apos;n&apos;) &amp;&amp; list.contains(&apos;e&apos;)) &#123;//尝试移除元素 list.remove((Character)&apos;o&apos;); list.remove((Character)&apos;n&apos;); list.remove((Character)&apos;e&apos;); result.add(1); dfs(list); list.add(&apos;o&apos;); list.add(&apos;n&apos;); list.add(&apos;e&apos;); result.remove((Integer)1); &#125; if( list.contains(&apos;t&apos;) &amp;&amp; list.contains(&apos;w&apos;) &amp;&amp; list.contains(&apos;o&apos;)) &#123;//尝试移除元素 list.remove((Character)&apos;t&apos;); list.remove((Character)&apos;w&apos;); list.remove((Character)&apos;o&apos;); result.add(2); dfs(list); list.add(&apos;t&apos;); list.add(&apos;w&apos;); list.add(&apos;o&apos;); result.remove((Integer)2); &#125; if( list.contains(&apos;t&apos;) &amp;&amp; list.contains(&apos;h&apos;) &amp;&amp; list.contains(&apos;r&apos;) &amp;&amp; list.contains(&apos;e&apos;) &amp;&amp; list.contains(&apos;e&apos;)) &#123;//尝试移除元素 int times=0; //判断e出现了两次 list.remove((Character)&apos;e&apos;); times++; if(list.contains(&apos;e&apos;))&#123; times++; &#125; if(times==1)&#123; //只包含一个 list.add(&apos;e&apos;); &#125; if(times==2)&#123; list.add(&apos;e&apos;); list.remove((Character)&apos;t&apos;); list.remove((Character)&apos;h&apos;); list.remove((Character)&apos;r&apos;); list.remove((Character)&apos;e&apos;); list.remove((Character)&apos;e&apos;); result.add(3); dfs(list); list.add(&apos;t&apos;); list.add(&apos;h&apos;); list.add(&apos;r&apos;); list.add(&apos;e&apos;); list.add(&apos;e&apos;); result.remove((Integer)3); &#125; &#125; if( list.contains(&apos;f&apos;) &amp;&amp; list.contains(&apos;o&apos;) &amp;&amp; list.contains(&apos;u&apos;) &amp;&amp; list.contains(&apos;r&apos;)) &#123;//尝试移除元素 list.remove((Character)&apos;f&apos;); list.remove((Character)&apos;o&apos;); list.remove((Character)&apos;u&apos;); list.remove((Character)&apos;r&apos;); result.add(4); dfs(list); list.add(&apos;f&apos;); list.add(&apos;o&apos;); list.add(&apos;u&apos;); list.add(&apos;r&apos;); result.remove((Integer)4); &#125; if( list.contains(&apos;f&apos;) &amp;&amp; list.contains(&apos;i&apos;) &amp;&amp; list.contains(&apos;v&apos;) &amp;&amp; list.contains(&apos;e&apos;)) &#123;//尝试移除元素 list.remove((Character)&apos;f&apos;); list.remove((Character)&apos;i&apos;); list.remove((Character)&apos;v&apos;); list.remove((Character)&apos;e&apos;); result.add(5); dfs(list); list.add(&apos;f&apos;); list.add(&apos;i&apos;); list.add(&apos;v&apos;); list.add(&apos;e&apos;); result.remove((Integer)5); &#125; if( list.contains(&apos;s&apos;) &amp;&amp; list.contains(&apos;i&apos;) &amp;&amp; list.contains(&apos;x&apos;)) &#123;//尝试移除元素 list.remove((Character)&apos;s&apos;); list.remove((Character)&apos;i&apos;); list.remove((Character)&apos;x&apos;); result.add(6); dfs(list); list.add(&apos;s&apos;); list.add(&apos;i&apos;); list.add(&apos;x&apos;); result.remove((Integer)6); &#125; if( list.contains(&apos;s&apos;) &amp;&amp; list.contains(&apos;e&apos;) &amp;&amp; list.contains(&apos;v&apos;) &amp;&amp; list.contains(&apos;e&apos;) &amp;&amp; list.contains(&apos;n&apos;)) &#123;//尝试移除元素 int times=0; //判断e出现了两次 list.remove((Character)&apos;e&apos;); times++; if(list.contains(&apos;e&apos;))&#123; times++; &#125; if(times==1)&#123; //只包含一个 list.add(&apos;e&apos;); &#125; if(times==2) &#123; list.add(&apos;e&apos;); list.remove((Character) &apos;s&apos;); list.remove((Character) &apos;e&apos;); list.remove((Character) &apos;v&apos;); list.remove((Character) &apos;e&apos;); list.remove((Character) &apos;n&apos;); result.add(7); dfs(list); list.add(&apos;s&apos;); list.add(&apos;e&apos;); list.add(&apos;v&apos;); list.add(&apos;e&apos;); list.add(&apos;n&apos;); result.remove((Integer) 7); &#125; &#125; if( list.contains(&apos;e&apos;) &amp;&amp; list.contains(&apos;i&apos;) &amp;&amp; list.contains(&apos;g&apos;) &amp;&amp; list.contains(&apos;h&apos;) &amp;&amp; list.contains(&apos;t&apos;)) &#123;//尝试移除元素 list.remove((Character)&apos;e&apos;); list.remove((Character)&apos;i&apos;); list.remove((Character)&apos;g&apos;); list.remove((Character)&apos;h&apos;); list.remove((Character)&apos;t&apos;); result.add(8); dfs(list); list.add(&apos;e&apos;); list.add(&apos;i&apos;); list.add(&apos;g&apos;); list.add(&apos;h&apos;); list.add(&apos;t&apos;); result.remove((Integer)8); &#125; if( list.contains(&apos;n&apos;) &amp;&amp; list.contains(&apos;i&apos;) &amp;&amp; list.contains(&apos;n&apos;) &amp;&amp; list.contains(&apos;e&apos;)) &#123;//尝试移除元素 int times=0; //判断e出现了两次 list.remove((Character)&apos;n&apos;); times++; if(list.contains(&apos;n&apos;))&#123; times++; &#125; if(times==1)&#123; //只包含一个 list.add(&apos;n&apos;); &#125; if(times==2) &#123; list.add(&apos;n&apos;); list.remove((Character) &apos;n&apos;); list.remove((Character) &apos;i&apos;); list.remove((Character) &apos;n&apos;); list.remove((Character) &apos;e&apos;); result.add(9); dfs(list); list.add(&apos;n&apos;); list.add(&apos;i&apos;); list.add(&apos;n&apos;); list.add(&apos;e&apos;); result.remove((Integer) 9); &#125; &#125; //eightfourFiveSixSEVEN &#125;&#125; 一面&nbsp;&nbsp;&nbsp;一面和二面都是现场面的，当时是在一个酒店里面，我们是最后一批，进去了之后等了一段时间，有个大屏幕上面通知着大家去面试的顺序，于等到了大概四点半左右去进行一面，还记得当时在外面也能看到里面的情况的，在最靠近外面的地方有个面试官比较严厉，当时还想着不会那么巧被抽中吧，结果怕什么来什么，进去之后果然是那个面试官，无语ing。。。然后看了我的简历之后，让我写个翻转双向链表的代码，面试官之后说简单吧？！我：。。。运气好到爆呀，于是就写了，因为有点紧张，时间也比较紧，最后写的地方有两个错误，之后面试官拿着我的简历问了下去，第一个简历是重点，问的比较少，更多的是落到了后面，不如hbase的文件存储格式，能否插入数据，TensorFlow了解过吗，好不容易问了个spring的，结果是spring如何解决循环依赖的，好在我还了解过的，之后在短短的三四十分钟问了我30多个小问题吧，问的比较快，我答的也比较快，最后问我数据结构掌握的怎么样，我说还可以，然后问我DFS和BFS，然后又让我说几个场景用到这两个算法的，我也没有总结过，结果被搞得很狼狈，然后问A*算法知道吧？染色算法呢？！12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485//手写代码的题目，反转链表：public class Challenge &#123; public static void main(String[] args) &#123; DoubleLink head = build(new int[]&#123;9,7,12,2,3,4,5,6&#125;); inverse(head); &#125; public static class DoubleLink&#123; DoubleLink(int value)&#123; this.value = value; prev=null; next=null; &#125; DoubleLink()&#123; prev=null; next=null; &#125; int value; DoubleLink prev; DoubleLink next; &#125; public static DoubleLink insert(DoubleLink head,int value)&#123; if(head==null)&#123; DoubleLink temp = new DoubleLink(value); head = new DoubleLink(); head.prev=temp; head.next=temp; &#125;else&#123; DoubleLink temp = new DoubleLink(value); temp.prev = head.next; head.next.next = temp; head.next = temp; &#125; return head; &#125; public static DoubleLink build(int [] array) &#123; DoubleLink head = null; for (int i = 0; i &lt; array.length ; i++) &#123; head = insert(head,array[i]); &#125; System.out.println(&quot;建表之后：&quot;); for (DoubleLink p = head.prev; p != null ; p = p.next) &#123; System.out.print(p.value+&quot; &quot;); &#125; System.out.println(&quot;\\n==================&quot;); for (DoubleLink p = head.next; p != null ; p = p.prev) &#123; System.out.print(p.value+&quot; &quot;); &#125; System.out.println(&quot;\\n=================&quot;); return head; &#125; public static DoubleLink inverse(DoubleLink head) &#123; if(head==null)&#123; return null; &#125; DoubleLink p = head.prev; DoubleLink pointer = p; DoubleLink inverse = null; while(p != null)&#123; p = p.next; pointer.next = inverse; pointer.prev = null; if(inverse != null)&#123; inverse.prev = pointer; &#125;else&#123; head.next = pointer; &#125; inverse = pointer; pointer = p; &#125; head.prev = inverse ; System.out.println(&quot;翻转之后：&quot;); for (DoubleLink index = head.prev; index != null ; index = index.next) &#123; System.out.print(index.value+&quot; &quot;); &#125; System.out.println(&quot;\\n==================&quot;); for (DoubleLink index = head.next; index != null ; index = index.prev) &#123; System.out.print(index.value+&quot; &quot;); &#125; System.out.println(&quot;\\n=================&quot;); return head; &#125;&#125; 二面&nbsp;&nbsp;&nbsp;一面之后我都感觉被挂掉了，谁知道面试官让我在休息厅等着，我还觉得不可思议的，于是就有了二面，二面是综合面试，重要问的是项目的团队分工，和谐相处等等之类的问题，然后就面试完了，我觉得自己肯定是挂掉了，不觉间万念俱灰。特别是和其他同学的比较一下，那种感觉真的是不知从何说起呀~~~ 在线加试&nbsp;&nbsp;&nbsp;本来认为必挂的结局有了变化，别人的是通过了面试，而我的是通过了面试但是需要加试，于是去仔细了解了一下这个，网上给的答案是两个，要么是性格测试有问题，笔试做的不理想，要么就是special offer，直接排除后者，那就是前面的环节有了问题，最后在焦急的等待之中，才发现问题是出在笔试上面，又约定了时间笔试，于是那几天又刷了很多华为的笔试题！之后在笔试中第一道题15分钟AC,第二道题有点不熟悉，直接第三题，找到了思路，也能做出来，但是少了一点判断的东西，最后有点遗憾！测试用例通过了20%，遗憾的结束了笔试。 发短信确认时间&nbsp;&nbsp;&nbsp;这可能是最坑人的部分了，发短信让确认实习的起止时间，我填的比较早，后来才发现老师并不想让我们走，和往届的不一样，开会的时候老师又在会上强调了一下，我认为上次定的时间就是最后的时间了，于是赶紧给老师解释了一下这件事情，结果导致和老师之间的关系也有点僵化，最后不得不给老师认错！后来才知道原来这个短信根本就不是最后的时间，真的是好气呀！！！ 现场签约&nbsp;&nbsp;&nbsp;到了签约的时候才发现上次的发短信是为了过滤掉一些实习时间短的、不想实习的人，而不是最后的选择，一口老血喷出好远。。。只有在签约的时候定的时间才是真正有效的，于是有沟通了一下，稍微提前了一点，完成了最后的签约。至此，春招也算告一段落！ 春招总结&nbsp;&nbsp;&nbsp;回顾春招的点滴，从二月下旬到五月上旬差不多二个多月将近三个月的样子，自己真的是百感交集呀，首先就是检验了一下自己掌握知识的水平，知道了自己所处的位置，有了努力的方向，其次也遇到了很多的挫折，很多的打击，很多次否定自己，很多次怀疑人生，工作不是好找的，从这点可以看出来，另外就是和导师、实验室一定要打好招呼，不要一意孤行，不然最后倒霉的肯定是自己！有实力的运气是机遇，没有实力的运气只是激动，是想有机遇还是只是简单地激动一下，都需要靠我们的努力了！！！","comments":true,"categories":[],"tags":[{"name":"春招","slug":"春招","permalink":"http://www.cnblogs.com/zyrblog/tags/春招/"},{"name":"面试","slug":"面试","permalink":"http://www.cnblogs.com/zyrblog/tags/面试/"}]},{"title":"生活","date":"2019-05-04T08:26:31.000Z","path":"2019/05/04/生活/","text":"什么是生活呢？ 人真的不能停下脚步，一旦停滞不前，那就是不进则退，学习是一件天天向上的事情，如果不能持之以恒，既得的能力是会下降的，既得的知识是会遗忘的。生活就是每天不断向前，同时在昨天的基础上再登高峰！生活就是要有活着的意义，知道自己在为什么而活，在为什么而前进！生活就是要努力提升自己，从而更好地照顾自己的亲人，做自己想做的事情！ 什么是耻辱呢？ 耻辱就是自己将你以前有的否定，自己将你变得乱七八糟，将你的能力归零，将你的生活过得不成人样，将你自豪的无情打碎，将你焦急的等待变成不符合对方的用人标准，将你自己变得一文不值，让你没有竞争力，没有闪光点，没有独特性，没有上进心，最终自暴自弃，遭人白眼，被人嘲笑，自甘堕落！ 什么是学习呢？ 学习是要知道自己在做什么，自己能够做到什么程度，能否拿来使用，能否举一反三，能否化繁为简，能否标新立异，能否创新创造，能否达到锻炼智力，思考求变的效果，如果没有自己的体会，不能举一反三，融会贯通，形成知识体系，那么这样的学习只会量积，而不会量变！ 什么是自由？ 自由最基本的是财务自由，能够挣到足够多的钱，从而不让自己的人生在枯燥的无意义的事情上面耗费精力，能够在急需用钱的时候不至于捉襟见肘，能够过上自己想要的生活，很多人一辈子都是在为财务自由而奋斗呀，最终还是不自由；更上层次的自由是精神自由，能够做自己想做的事情，能够去体验各种不同的人生，接触不同的事物，感受不同的文化，从而开阔眼界，提升境界；第三层自由是能够为社会做出贡献，为自己的文化贡献自己的力量，从而帮助更多的人自由，为大家在通向自由蛮荒之地开辟出康庄大道！ 什么是习惯？ 习惯是我们不经意做出的反应，比如和人打招呼，比如说话的方式和语气，生活作息之规律，自己日常重复的却没有太过注意的种种行为。习惯源自肢体记忆，精神记忆，经过社会环境和文化的演变从而呈现不同的姿态；好的习惯受益终生，坏的习惯害人害己，习惯一旦被打破人会感到不适感，这是符合熵增定律的，但是承受住这种不适感就能从中获得之前不曾有的感受，坏的习惯具有反复性，抵抗性，耐改性，比如一个人将deadline当做习惯，那么不到deadline就不会去做一件事，这样得到的效果和结果往往是不理想的，好的习惯是实现一切上层建筑的根本！习惯不好，一生毁掉！ 什么又是理想呢？ 理想是一种对自己能够做到某件事的一种把握和渴望，‘理’代表自己是清醒的时候做出的规划，‘想’是还没有成功，但是每分每秒都会去想。人不能没有理想，失去了理想的人会被时间洗刷成行尸走肉，而理想的实现靠的就是好的习惯，比如有制定计划的习惯，有严格遵循计划的习惯，有不达终点不罢休的习惯，有为了理想不懈拼搏的习惯；理想是支撑我们前进的动力，它可以是物质的，也可以是精神的，可以是真实的，有了理想的人生才叫做生活，而没有实现理想就会有耻辱感，习惯是学习的指路明灯，自由是理想的最高层次，学习是实现理想的必由之路！","comments":true,"categories":[],"tags":[{"name":"习惯","slug":"习惯","permalink":"http://www.cnblogs.com/zyrblog/tags/习惯/"},{"name":"理想","slug":"理想","permalink":"http://www.cnblogs.com/zyrblog/tags/理想/"}]},{"title":"对面试的一些反思","date":"2019-05-01T03:53:30.000Z","path":"2019/05/01/对面试的一些反思/","text":"1、没有提前准备 这点可以说是最大的败笔了，压力对一个人的成长来说是非常重要的，很多时候如果缺少了压力，人就会变得比较颓废，既浪费了时光，又荒废了自己的所学。面试至少需要提前三个月来准备，而且是每天非常忙碌的准备才有效果。 2、投递简历比较晚 因为准备的不好，所以刚开始不敢投简历，一直在逼自己学习，这样的状态肯定没有轻松上阵，准备充足有把握，一般2月份就可以投简历面试的，到了我这里一直拖到了3月底，整整差了将近一个半月的时间，错过了很多的面试机会和条件。 3、细节把控不过关 在有限的时间里，只靠着网上的面经和每年透露出来的一些面试题是远远不够的，因为这些东西太片面化了，同样的一个东西从不同的方面来问都会让我们不知所措，比如线程池的概念、创建、原理、区别、选用、获得返回值等等。 4、编程题不能考虑周全 编程题至少要有300道正确编码的底子才能随机应变，形成扎实的功底，因为提前没有认真练习，导致的结果就是测试用例思考的不全面，除了正常的功能测试之外考虑的太少了，比如参考用力给的是一位数，自己就全部考虑一位数，忘记了多位数。往往会被题目给的参考用例带偏方向。在写程序之前一定要产生周全的测试用例，这样才能让代码的健壮性得以提高。另外还要注意大数的溢出问题。 5、编程题找不到思路 之前刷的是《剑指offer》，上面的题目都见过，但是笔试和面试的时候却发现根本就没有任何上面的题目，其实这也是大厂特意而为之的，看书最重要的是学习思考的方法和解决问题的角度，只有明白了其中的原理并且能够举一反三灵活运用才算是登堂入室。其实思路无非就是找到问题的相关性质，使用相关的数据结构和算法来编码实现，算法中动态规划是非常重要的，在一些棘手的问题之中大放光彩，但是难以定义和掌握，需要较高的抽象能力、递推能力和扩展能力，此外DFS/BFS在每年的面试题中也是经常出现的。 6、掌握的知识不全面，缺少系统性的复习 因为是仓促准备，只把项目中用到的知识（Java基础、Spring MVC、Mybatis、MySQL、Redis）准备了一下，结果很多公司（阿里、字跳等）并不满足这些模块，更喜欢问一些SOA、MQ、分布式系统、HTTP/HTTPS、SSL等方面的知识，这些东西还需要掌握到一定的深度才可以，没有准备过，结果问到的时候可能就是吞吞吐吐，自相矛盾。 7、项目中常见的问题找不到最好的解决办法 一般面试上来就是问项目的内容的，很多常见的问题，比如订单id的唯一性生成、如何防止重复提交的幂等性设计等问题，以及分布式锁的实施，单点失效问题，主从备份，分库分表中间件等等，这些都是必须要熟练掌握的，如果采用了比较重量级的解决办法，面试官可能会问网上有那么多简单的方法问什么不考虑使用呢？！基本上就没戏了。。 8、数学知识储备不足 在笔试和面试的环节，一些数学方法是非常重要的,比如全排列，求子集，概率问题，动态规划，滑动窗口算法，斐波那契问题，点线面问题，二分搜索，以及一些分析问题的角度和建模的手段是需要强化和掌握的，通过时间和空间的取舍从而得出最好的解决办法。","comments":true,"categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"http://www.cnblogs.com/zyrblog/tags/面试/"},{"name":"反思","slug":"反思","permalink":"http://www.cnblogs.com/zyrblog/tags/反思/"},{"name":"随笔","slug":"随笔","permalink":"http://www.cnblogs.com/zyrblog/tags/随笔/"}]}]